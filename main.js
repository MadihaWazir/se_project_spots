!function(){"use strict";const e=(e,t,r)=>{e.querySelector(`#${t.id}-error`).textContent="",t.classList.remove(r.inputErrorClass)},t=(e,t,o)=>{(e=>e.some((e=>!e.validity.valid)))(e)?r(t,o):(t.classList.remove(o.inactiveButtonClass),t.disabled=!1)},r=(e,t)=>{e&&(e.classList.add(t.inactiveButtonClass),e.disabled=!0)},o=(t,r,o)=>{r.forEach((r=>{e(t,r,o)}))};function n(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Save";t?(e.textContent=r,e.setAttribute("disabled",!0)):(e.textContent=o,e.removeAttribute("disabled"))}const a=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>{if(e.ok)return e.json()}))}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}editUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}editAvatarInfo(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}changeLikeStatus(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>{if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"129987cd-1845-4988-87da-5f7e36feb45e","Content-Type":"application/json"}});a.getAppInfo().then((e=>{let[t,r]=e;t.forEach((e=>{const t=B(e);D.append(t)})),document.querySelector(".profile__avatar")})).catch((e=>{console.error(e)}));const s=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),i=document.querySelector(".profile__avatar-button"),c=document.querySelector(".profile__name"),d=document.querySelector(".profile__description"),u=document.querySelector("#edit-modal"),m=u.querySelector(".modal__form"),_=u.querySelector(".modal__close-button"),v=u.querySelector("#profile-name-input"),h=u.querySelector("#profile-description-input"),f=document.querySelector("#add-card-modal"),S=f.querySelector(".modal__form"),y=(f.querySelector(".modal__submit-button"),f.querySelector(".modal__close-button")),b=f.querySelector("#add-card-name-input"),p=f.querySelector("#add-card-link-input"),q=document.querySelector("#avatar-modal"),E=q.querySelector(".modal__form"),k=q.querySelector(".modal__submit-button"),L=q.querySelector(".modal__close-button"),C=(q.querySelector("#avatar-input"),q.querySelector("#profile-avatar-input")),g=document.querySelector("#delete-modal"),$=g.querySelector(".modal__form"),U=g.querySelector(".modal__close-button");U.addEventListener("click",(()=>{O(g)}));const j=g.querySelector(".modal__submit-button");j.addEventListener("click",(()=>{O(g)}));const A=document.querySelector("#preview-modal"),P=A.querySelector(".modal__image"),x=A.querySelector(".modal__caption");A.querySelector(".modal__close-button").addEventListener("click",(()=>{O(A)}));const I=document.querySelector("#card-template"),D=document.querySelector(".cards__list");let T,w;function B(e){const t=I.content.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__title"),o=t.querySelector(".card__image"),n=t.querySelector(".card__like-button"),s=t.querySelector(".card__delete-button");return r.textContent=e.name,o.src=e.link,o.alt=e.name,n.addEventListener("click",(t=>function(e,t){const r=e.target.classList.contains("card__like-button_liked");a.changeLikeStatus(t,r).then((t=>{e.target.classList.toggle("card__like-button_liked")})).catch(console.error)}(t,e._id))),e.isLiked&&n.classList.add("card__like-button_liked"),s.addEventListener("click",(r=>function(e,t){T=e,w=t,N(g)}(t,e._id))),o.addEventListener("click",(()=>{N(A),P.src=e.link,P.alt=e.name,x.textContent=e.name})),t}function N(e){e.classList.add("modal_opened"),document.addEventListener("keydown",J)}function O(e){e.classList.remove("modal_opened"),document.removeEventListener("keydown",J)}function J(e){"Escape"===e.key&&O(document.querySelector(".modal_opened"))}function H(e){e.target.classList.contains("modal")&&O(e.target)}var z;U.addEventListener("click",(()=>{O(g)})),j.addEventListener("click",(()=>{O(g)})),s.addEventListener("click",(()=>{v.value=c.textContent,h.value=d.textContent,o(m,[v,h],{inputErrorClass:"modal__input_type_error",errorClass:"modal__error"}),N(u)})),_.addEventListener("click",(()=>{O(u)})),l.addEventListener("click",(()=>{N(f)})),y.addEventListener("click",(()=>{O(f)})),m.addEventListener("submit",(function(e){e.preventDefault();const t=e.submitter;n(t,!0,"Saving...","Save"),a.editUserInfo({name:v.value,about:h.value}).then((e=>{c.textContent=v.value,d.textContent=h.value,O(u)})).catch(console.error).finally((()=>{n(t,!1,"Saving...","Save")}))})),S.addEventListener("submit",(function(e){e.preventDefault(),n(e.submitter,!0,"Saving...","Save");const t={name:b.value,link:p.value};a.addCard(t).then((r=>{const o=B(t);D.prepend(o),e.target.reset(),O(f)})).catch(console.error)})),i.addEventListener("click",(()=>{C.value="",o(E,[C],{inputErrorClass:"modal__input_type_error",errorClass:"modal__error"}),N(q)})),L.addEventListener("click",(()=>{O(q)})),E.addEventListener("submit",(function(e){e.preventDefault(),n(e.submitter,!0,"Saving...","Save"),k.disabled=!0,a.editAvatarInfo(C.value).then((e=>{profileAvatar.src=e.avatar,O(q)})).catch(console.error).finally((()=>{setTimeout((()=>{k.disabled=!1}),1e3)}))})),$.addEventListener("submit",(function(e){e.preventDefault(),n(e.submitter,!0,"Deleting...","Delete"),a.deleteCard(w).then((()=>{T.remove(),O(g)})).catch(console.error)})),document.querySelectorAll(".modal").forEach((e=>{e.addEventListener("mousedown",H)})),z={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},document.querySelectorAll(z.formSelector).forEach((r=>{((r,o)=>{const n=Array.from(r.querySelectorAll(o.inputSelector)),a=r.querySelector(o.submitButtonSelector);t(n,a,o),n.forEach((s=>{s.addEventListener("input",(function(){((t,r,o)=>{r.validity.valid?e(t,r,o):((e,t,r,o)=>{e.querySelector(`#${t.id}-error`).textContent=r,t.classList.add(o.inputErrorClass)})(t,r,r.validationMessage,o)})(r,s,o),t(n,a,o)}))}))})(r,z)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,